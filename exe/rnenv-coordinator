#!/usr/bin/env python3

import argparse
import subprocess
import sys

import rnenv

JSON = 'coordinator.json'

def create_state():
    num_devices = int(rnenv.env('DEVICES') or subprocess.check_output("nvidia-smi --id=0 --query-gpu=count --format=csv,noheader", shell=True))

    return dict(
        devices={ i: { "pid": -1 } for i in range(num_devices) }
    )

def get_state():
    if not rnenv.exists(JSON):
        state = create_state()
    else:
        state = rnenv.read(JSON)

    return state

def clear_pid(state, pid):
    for _, info in state["devices"].items():
        if info["pid"] == pid:
            info["pid"] = -1

def find_free_device(state, ignore=[]):
    for index, info in state["devices"].items():
        if index in ignore:
            continue

        pid = info["pid"]
        if pid == -1 or not rnenv.poll(pid):
            return index

    raise RuntimeError("No available devices")

def find_free_devices(state, count):
    available = len(state["devices"])
    if count > available:
        raise RuntimeError(f"Requested more GPUs ({count}) than available ({available})")

    indices = []
    for _ in range(count):
        indices.append(find_free_device(state, ignore=indices))

    return indices

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=f'rnenv device coordinator')
    parser.add_argument('--pid', type=int, required=True, help='Identifier of the root process of the environment')
    parser.add_argument('--count', type=int, required=True, help='Amount of devices to reserve')
    args = parser.parse_args()

    state = get_state()

    clear_pid(state, args.pid)

    try:
        indices = find_free_devices(state, args.count)
    except RuntimeError as e:
        print(e, file=sys.stderr)
        exit(1)

    for index in indices:
        state["devices"][index]["pid"] = args.pid

    rnenv.save(JSON, state)

    print(','.join(str(index) for index in indices))
