#!/usr/bin/env python3

import argparse
from typing import Any, Dict, List

import genv

JSON = 'envs.json'

Env = Dict[Any, Any]
Envs = Dict[int, Env]

QUERIES = {
    'eid': lambda env: env["eid"],
    'name': lambda env: env["name"] if "name" in env else None,
}

def cleanup(envs: Envs) -> None:
    # cleanup terminated processes
    for env in envs.values():
        env["pids"] = [pid for pid in env["pids"] if genv.poll(pid)]

    # cleanup terminated environments
    for eid in [eid for eid, env in envs.items() if len(env["pids"]) == 0]:
        del envs[eid]

def activate(envs: Envs, eid: int, pid: int) -> None:
    if eid not in envs:
        envs[eid] = dict(
            eid=eid,
            pids=[],
        )

    env: Env = envs[eid]

    if pid not in env["pids"]:
        env["pids"].append(pid)

def deactivate(envs: Envs, eid: int, pid: int) -> None:
    env: Env | None = envs.get(eid)

    if env is not None:
        while pid in env["pids"]:
            env["pids"].remove(pid)

        if len(env["pids"]) == 0:
            del envs[eid]

def rename(env: Env, name: str | None) -> None:
    if name is None:
        if "name" in env:
            del env["name"]
    else:
        env["name"] = name

def do_query(envs: Envs, eid: int | None, queries: List[str]) -> None:
    eids = [eid] if eid is not None else list(envs.keys())

    for eid in eids:
        env = envs.get(eid)

        if env is None:
            continue

        query = lambda name: str(QUERIES[name](env) or '')

        print(','.join(query(name) for name in queries))

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=f'genv environment manager')
    parser.add_argument('--no-cleanup', dest='cleanup', action='store_false', help='Do not perform clean up')
    parser.add_argument('--reset', action='store_true', help='Reset previous state')

    subparsers = parser.add_subparsers(dest='command', required=True)

    parser_activate = subparsers.add_parser('activate', help='Activate a new process')
    parser_activate.add_argument('--pid', type=int, required=True, help='PID of the activated process')
    parser_activate.add_argument('--eid', type=int, help='Environment ID')

    parser_deactivate = subparsers.add_parser('deactivate', help='Deactivate a process')
    parser_deactivate.add_argument('--pid', type=int, required=True, help='PID of the deactivated process')
    parser_deactivate.add_argument('--eid', type=int, help='Environment ID')

    parser_rename = subparsers.add_parser('rename', help='Rename an environment')
    parser_rename.add_argument('--eid', type=int, required=True, help='Environment ID')
    parser_rename.add_argument('--name', help='Environment name')

    parser_query = subparsers.add_parser('query', help='Query environments')
    parser_query.add_argument('--eid', type=int, help='Environment ID')
    parser_query.add_argument('--query', '--queries', dest='queries', nargs='+', choices=QUERIES.keys(), required=True)

    args = parser.parse_args()

    if genv.exists(JSON) and not args.reset:
        json = genv.read(JSON)

        # we need to convert environment ids to integers. they are saved as
        # strings because dictionary keys in json files must be strings.
        json["envs"] = { int(eid): env for eid, env in json["envs"].items() }
    else:
        json = dict(
           envs=dict(),
        )

    envs: Envs = json["envs"]

    if args.cleanup:
        cleanup(envs)

    if args.command == 'activate':
        pid = args.pid
        eid = args.eid or pid

        activate(envs, eid, pid)
    elif args.command == 'deactivate':
        pid = args.pid
        eid = args.eid or pid

        deactivate(envs, eid, pid)
    elif args.command == 'rename':
        env: Env = envs.get(args.eid)

        if env is not None:
            rename(env, args.name)
    elif args.command == 'query':
        do_query(envs, args.eid, args.queries)

    genv.save(JSON, json)
