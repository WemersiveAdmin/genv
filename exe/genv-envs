#!/usr/bin/env python3

import argparse
from datetime import datetime
from typing import Any, Callable, Dict, List, Optional

import genv

JSON = 'envs.json'

Env = Dict[Any, Any]
Envs = Dict[int, Env]

QUERIES = {
    'eid': lambda env: env["eid"],
    'name': lambda env: env["config"].get("name"),
    'creation': lambda env: env["creation"],
}

def cleanup(envs: Envs, poll: Callable[[int], bool]=genv.poll) -> None:
    """
    Clean up processes and environments.
    """
    for env in envs.values():
        env["pids"] = [pid for pid in env["pids"] if poll(pid)]

    for eid in [eid for eid, env in envs.items() if len(env["pids"]) == 0]:
        del envs[eid]

def do_activate(envs: Envs, pid: int, eid: int, uid: int, username: str) -> None:
    if eid not in envs:
        envs[eid] = dict(
            eid=eid,
            uid=uid,
            username=username,
            creation=datetime.now().strftime(genv.DATETIME_FMT),
            pids=[],
            config={},
        )

    envs[eid]["pids"].append(pid)

def do_config(envs: Envs, eid: int, command: str, args: argparse.Namespace) -> None:
    env: Env = envs.get(eid)

    if env is None:
        return

    def name(name: Optional[str], clear: bool) -> None:
        if name is not None:
            env["config"]["name"] = name

        if clear and "name" in env["config"]:
            del env["config"]["name"]

    if command == 'name':
        name(args.name, args.clear)

def do_deactivate(envs: Envs, pid: int) -> None:
    cleanup(envs, poll=lambda pid_: pid_ != pid)

def do_ps(envs: Envs, header: bool=True) -> None:
    if header:
        print('ID      USER            NAME            CREATED              PID(S)')

    for env in envs.values():
        eid = env["eid"]
        user = f'{env["username"]}({env["uid"]})'
        name = env["config"].get("name", '')
        created = genv.time_since(env["creation"])
        pids = ','.join(str(pid) for pid in env["pids"])

        print(f'{eid:<8}{user:<16}{name:<16}{created:<21}{pids}')

def do_query(envs: Envs, eid: Optional[int], queries: List[str]) -> None:
    eids = [eid] if eid is not None else list(envs.keys())

    for eid in eids:
        env = envs.get(eid)

        if env is None:
            continue

        query = lambda name: str(QUERIES[name](env) or '')

        print(','.join(query(name) for name in queries))

def parse_args() -> argparse.Namespace:
    def activate(parser):
        parser.add_argument('--pid', type=int, required=True, help='Process identifier')
        parser.add_argument('--eid', type=int, required=True, help='Environment identifier')
        parser.add_argument('--uid', type=int, required=True, help='User identifier')
        parser.add_argument('--username', required=True, help='User name')

    def config(parser):
        def name(parser):
            group = parser.add_mutually_exclusive_group(required=True)
            group.add_argument('--name', help='Environment name')
            group.add_argument('--clear', action='store_true', help='Clearn environment name')

        parser.add_argument('--eid', type=int, required=True, help='Environment ID')

        subparsers = parser.add_subparsers(dest='config', required=True)

        for command, help in [
            (name, 'Configure environment name'),
        ]:
            command(subparsers.add_parser(command.__name__, help=help))

    def deactivate(parser):
        parser.add_argument('--pid', type=int, required=True, help='Process identifier')

    def ps(parser):
        parser.add_argument('--no-header', dest='header', action='store_false', help='Do not print column headers')

    def query(parser):
        parser.add_argument('--eid', type=int, help='Environment identifier')
        parser.add_argument('--query', '--queries', dest='queries', nargs='+', choices=QUERIES.keys(), required=True)

    parser = argparse.ArgumentParser(description=f'genv environment manager')
    parser.add_argument('--no-cleanup', dest='cleanup', action='store_false', help='Do not perform clean up')
    parser.add_argument('--reset', action='store_true', help='Reset previous state')

    subparsers = parser.add_subparsers(dest='command', required=True)

    for command, help in [
        (activate, 'Activate a process'),
        (config, 'Configure an environment'),
        (deactivate, 'Deactivate a process'),
        (ps, 'Print information about active environments'),
        (query, 'Query environments or a specific one'),
    ]:
        command(subparsers.add_parser(command.__name__, help=help))

    return parser.parse_args()

if __name__ == "__main__":
    args = parse_args()

    if genv.exists(JSON) and not args.reset:
        json = genv.read(JSON)

        # we need to convert environment ids to integers. they are saved as
        # strings because dictionary keys in json files must be strings.
        json["envs"] = { int(eid): env for eid, env in json["envs"].items() }
    else:
        json = dict(
           envs={},
        )

    envs: Envs = json["envs"]

    if args.cleanup:
        cleanup(envs)

    if args.command == 'activate':
        do_activate(envs, args.pid, args.eid, args.uid, args.username)
    elif args.command == 'config':
        do_config(envs, args.eid, command=args.config, args=args)
    elif args.command == 'deactivate':
        do_deactivate(envs, args.pid)
    elif args.command == 'ps':
        do_ps(envs, args.header)
    elif args.command == 'query':
        do_query(envs, args.eid, args.queries)

    genv.save(JSON, json)
