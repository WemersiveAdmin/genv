#!/usr/bin/env python3

from collections import defaultdict
from enum import Enum
import os
import re
import shutil
import subprocess
import sys
from typing import Iterable, Optional

# TODO(raz): move this function to a common library
def which(cmd: str) -> Optional[str]:
    """
    Find the original path of a genv shim.
    """
    shims = os.path.realpath(os.path.dirname(__file__))
    path = os.pathsep.join(dir for dir in os.environ.get('PATH').split(os.pathsep) if os.path.realpath(dir) != shims)

    return shutil.which(cmd, path=path)

def proxy(process: subprocess.Popen) -> None:
    """
    Reprint the output of a running nvidia-smi process while manipulating it.
    """
    DEVICE = re.compile(r'(^\|.*)\| \s*(\d+)MiB / \s*(\d+)MiB \|(.*\|$)')
    PROCESS = [
        re.compile(r'^\|\s*(\d+)\s+(\d+).*?(\d+)MiB \|$'), # < 11.1
        re.compile(r'^\|\s*(\d+)\s+N/A\s+N/A\s+(\d+).*?(\d+)MiB \|$'), # TODO(raz): support MIG (i.e. non N/A values)
    ]

    class Action(Enum):
        Print = 0
        Buffer = 1

    action = Action.Print

    previous = None
    buffered = []
    processes = defaultdict(list)

    while process.poll() is None:
        line = process.stdout.readline()

        if action == Action.Print and DEVICE.match(line):
            action = Action.Buffer

        if action == Action.Print:
            print(line, end='')
        elif action == Action.Buffer:
            skip = False

            for pattern in PROCESS:
                match = pattern.match(line)
                if match:
                    index = int(match.group(1))
                    pid = int(match.group(2))
                    mib = int(match.group(3))

                    if True: # TODO(raz): filter processes by environment identifier
                        processes[index].append(mib)
                    else:
                        skip = True

                    break

            if not skip:
                buffered.append((line, previous))

        previous = line

    for line, previous in buffered:
        match = DEVICE.match(line)
        if match:
            used = int(match.group(2))
            total = int(match.group(3))

            index = int(re.match(r'^\|\s*(\d+)\s*.*\|$', previous).group(1))
            used = sum(processes[index])

            line = DEVICE.sub(f'\\1| {str(used).rjust(6)}MiB / {str(total).rjust(5)}MiB |\\4', line)

        print(line, end='')

def run(args: Iterable[str]) -> int:
    """
    Run the original nvidia-smi and manipulate its output.
    Returns the process exit code.
    """
    with subprocess.Popen([which('nvidia-smi')] + args, stdout=subprocess.PIPE, text=True) as process:
        proxy(process)
        return process.returncode

# TODO(raz): handle modes of nvidia-smi where '--id' is not supported like 'pmon'
args = [f'--id={os.environ.get("CUDA_VISIBLE_DEVICES")}'] + sys.argv[1:]

sys.exit(run(args))
