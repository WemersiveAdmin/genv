#!/usr/bin/env python3

import os
import re
import shutil
import subprocess
import sys
from typing import Iterable, Optional

# TODO(raz): move this function to a common library
def which(cmd: str) -> Optional[str]:
    """
    Find the original path of a genv shim.
    """
    shims = os.path.realpath(os.path.dirname(__file__))
    path = os.pathsep.join(dir for dir in os.environ.get('PATH').split(os.pathsep) if os.path.realpath(dir) != shims)

    return shutil.which(cmd, path=path)

def proxy(process: subprocess.Popen) -> None:
    """
    Manipulate the output of a running nvidia-smi process.
    """
    DEVICE = re.compile(r'^(.*)\| \s*(\d+)MiB / \s*(\d+)MiB \|(.*)$')

    while process.poll() is None:
        line = process.stdout.readline()

        match = DEVICE.match(line)
        if match:
            used = int(match.group(2))
            total = int(match.group(3))

            # TODO(raz): change memory information

            line = DEVICE.sub(f'\\1| {str(used).rjust(6)}MiB / {str(total).rjust(5)}MiB |\\4', line)

        print(line, end='')

def run(args: Iterable[str]) -> int:
    """
    Run the original nvidia-smi and manipulate its output.
    Returns the process exit code.
    """
    with subprocess.Popen([which('nvidia-smi')] + args, stdout=subprocess.PIPE, text=True) as process:
        proxy(process)
        return process.returncode

# TODO(raz): handle modes of nvidia-smi where '--id' is not supported like 'pmon'
args = [f'--id={os.environ.get("CUDA_VISIBLE_DEVICES")}'] + sys.argv[1:]

sys.exit(run(args))
