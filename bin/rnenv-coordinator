#!/usr/bin/env python3

import argparse
import json
import os
import subprocess
import sys

def save_state(path, state):
    with open(path, 'w') as f:
        json.dump(state, f)

def create_state():
    num_devices = int(os.environ.get("RNENV_DEVICES") or subprocess.check_output("nvidia-smi --id=0 --query-gpu=count --format=csv,noheader", shell=True))

    return dict(
        devices={ i: { "pid": -1 } for i in range(num_devices) }
    )

def get_state(path):
    if not os.path.exists(path):
        state = create_state()
    else:
        with open(path) as f:
            state = json.load(f)

    return state

def check_pid(pid):
    try:
        os.kill(pid, 0)
    except OSError:
        return False
    else:
        return True

def clear_pid(state, pid):
    for _, info in state["devices"].items():
        if info["pid"] == pid:
            info["pid"] = -1

def find_free_device(state, ignore=[]):
    for index, info in state["devices"].items():
        if index in ignore:
            continue

        pid = info["pid"]
        if pid == -1 or not check_pid(pid):
            return index

    raise RuntimeError("No available devices")

def find_free_devices(state, count):
    available = len(state["devices"])
    if count > available:
        raise RuntimeError(f"Requested more GPUs ({count}) than available ({available})")

    indices = []
    for _ in range(count):
        indices.append(find_free_device(state, ignore=indices))

    return indices

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description=f'rnenv device coordinator')
    parser.add_argument('--state', required=True, help='State file path')
    parser.add_argument('--pid', type=int, required=True, help='Identifier of the root process of the environment')
    parser.add_argument('--count', type=int, required=True, help='Amount of devices to reserve')
    args = parser.parse_args()

    state = get_state(args.state)

    clear_pid(state, args.pid)

    try:
        indices = find_free_devices(state, args.count)
    except RuntimeError as e:
        print(e, file=sys.stderr)
        exit(1)

    for index in indices:
        state["devices"][index]["pid"] = args.pid

    save_state(args.state, state)

    print(','.join(str(index) for index in indices))
