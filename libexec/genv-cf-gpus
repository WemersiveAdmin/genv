#!/bin/bash

set -e
[ -n "$GENV_DEBUG" ] && set -x

if [[ $1 = "--description" ]] ; then
  echo "Amount of visible GPUs"
  exit 0
fi

print_help()
{
  echo "Usage: genv config gpus <gpus> [--save] [-h|--help]"
  echo
  echo "Control the amount of GPUs to be provisioned for this environment."
  echo
  echo "    --save       Save to disk at \$(genv home)"
  echo "    -h --help    Print this help message and exit"
  echo
  echo "Other commands:"
  echo "    load      Load GPU count from disk"
  echo "    show      Print GPU count"
  echo
}

print_help_and_fail()
{
  print_help >&2
  exit 1
}

configure()
{
  indices=$( exec genv exec coordinator --pid $GENV_ENVIRONMENT_ID --count $1 )

  cat <<EOS
# backup 'CUDA_VISIBLE_DEVICES' only if it existed before
if [ -z "\$GENV_GPUS" ]; then
  _genv_backup_env CUDA_VISIBLE_DEVICES
fi

_genv_set_env GENV_GPUS $1
_genv_set_env CUDA_VISIBLE_DEVICES "$indices"
EOS
}

case $1 in
  "")
    print_help_and_fail
    ;;
  -h|--help)
    # we must fail here as the exit code of this
    # script indicates whether or not the output
    # should be 'eval'.
    print_help_and_fail
    ;;
  load)
    home="$(exec genv-home --quiet)"
    [[ -n "$home" && -f "$home/gpus" ]] && configure $(<"$home/gpus")
    ;;
  show)
    [ -n "$GENV_GPUS" ] && echo "$GENV_GPUS"
    ;;
  *)
    re='^[0-9]+$'
    [[ $1 =~ $re && "$1" -ge 0 ]] || print_help_and_fail

    configure $1

    if [[ "$2" = "--save" ]]; then
      home="$(exec genv-home)"
      echo "$1" > "$home/gpus"
    fi
    ;;
esac
