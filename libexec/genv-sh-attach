#!/bin/bash

set -e
[ -n "$GENV_DEBUG" ] && set -x

if [[ $1 = "--description" ]] ; then
  echo "Attach devices to this environment"
  exit 0
fi

function reprint()
{
  while IFS= read -r line; do
    echo "echo \"${line//\$/\\\$}\""
  done;
}

print_help()
{
  echo "Usage: genv attach ... [-h|--help]"
  echo
  echo "Attach devices to this environment."
  echo
  echo "Actions:"
  echo "    --attach     Attach this environment devices (default)"
  echo "    --refresh    Only refresh this terminal if environment is already attached to devices"
  echo
  echo "Modes:"
  echo "    --count    Total number of devices to be attached (default)"
  echo "    --index    Attach to the device with the given index"
  echo
  echo "Options:"
  echo "    --quiet    Don't fail if device count it not configured"
  echo
  echo "You can attach devices by a specifying a total amount or by index (see modes above)."
  echo
  echo "If the environment has already more attached devices than the"
  echo "specified total amount, some would get detached."
  echo
  echo "By default, the configured device count is used."
  echo
}

action=""
quiet=""
mode=""
mode_value=""

while [[ $# -gt 0 ]] ; do
  arg=$1
  shift

  case $arg in
    -h|--help)
      print_help | reprint
      exit
    ;;
    --attach|--refresh)
      if [ -n "$action" ]; then
        {
          echo "Can't use '$arg' together with '$action'"
          echo
          print_help
        } >&2
        exit 1
      fi
      action="${arg#--}"
    ;;
    --count|--index)
      if [ -n "$mode" ]; then
        {
          echo "Can't use '$arg' together with '$mode'"
          echo
          print_help
        } >&2
        exit 1
      fi
      mode="${arg#--}"

      mode_value="$1"
      [ "$#" -gt 0 ] && shift

      if [ -z "$mode_value" ]; then
        {
          echo "Missing value for '$arg'"
          echo
          print_help
        } >&2
        exit 1
      fi

      re='^[0-9]+$'
      if ! [[ $mode_value =~ $re ]]; then
        {
          echo "Invalid value for '$arg' ($mode_value); must be an integer"
          echo
          print_help
        } >&2
        exit 1
      fi
    ;;
    --quiet)
      quiet="1"
    ;;
    *)
      {
        echo "Invalid argument '$arg'"
        echo
        print_help
      } >&2
      exit 1
    ;;
  esac
done

config_env()
{
  cat <<EOS
_genv_set_env CUDA_VISIBLE_DEVICES "${1:--1}"
EOS
}

case $action in
  ''|attach)
    case $mode in
      '')
        if [ -z "$GENV_GPUS" ]; then
          if ! [[ "$quiet" -eq 1 ]]; then
            {
              echo "Device count was not configured for this environment."
              echo "More information at:"
              echo
              echo "    genv config --help"
              echo
            } >&2
            exit 1
          fi
        else
          config_env $( exec genv exec devices attach --eid $GENV_ENVIRONMENT_ID --count $GENV_GPUS )
        fi
      ;;
      count)
        config_env $( exec genv exec devices attach --eid $GENV_ENVIRONMENT_ID --count $mode_value )
      ;;
      index)
        config_env $( exec genv exec devices attach --eid $GENV_ENVIRONMENT_ID --index $mode_value )
      ;;
    esac
  ;;
  refresh)
    config_env $( exec genv exec devices query --eid $GENV_ENVIRONMENT_ID )
  ;;
esac
