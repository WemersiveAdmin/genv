#!/bin/bash

set -e
[ -n "$GENV_DEBUG" ] && set -x

if [[ $1 = "--description" ]] ; then
  echo "Activate environment"
  exit 0
fi

if [ -n "$GENV_ENVIRONMENT_ID" ] ; then
  echo "Already running in an active environment" 1>&2
  exit 1
fi

# this is an 'sh' command and therefore the output is going to be 'eval'-ed.
# so if we want someething to be printed we need to wrap it with an 'echo' command.
function reprint()
{
  while read line; do
    echo "echo \"${line}\""
  done;
}

print_help()
{
  {
    echo "Usage: genv activate [id] [-h|--help]"
    echo
    echo "Activate this environment."
    echo
  } | reprint
}

eid=""

case "$1" in
-h|--help)
  print_help
  exit 0
  ;;
"")
  eid="\$\$"
  ;;
*)
  re='^[0-9]+$'
  if ! [[ $1 =~ $re && "$1" -gt 0 ]]; then
      {
        echo "Invalid environment identifier ($1); must be an integer"
        echo
      } | reprint

      print_help
      exit 1
  fi

  eid="$1"
  ;;
esac

cat <<EOS
_genv_append_env()
{
  # based on https://unix.stackexchange.com/a/415028
  export \$1="\${!1:+\${!1}:}\$2"
}

_genv_backup_env()
{
  if [ -n "\${!1}" ]; then
    export GENV_BACKUP_ENV_\$1="\${!1}"
    _genv_append_env GENV_BACKUP_ENVS \$1
  fi
}

_genv_set_env()
{
  export \$1="\$2"
  _genv_append_env GENV_ENVS \$1
}

_genv_unset_env()
{
  unset \$1
  # TODO(raz): remove from 'GENV_ENVS'
}

_genv_replace_env()
{
  _genv_backup_env \$1
  _genv_set_env \$1 "\$2"
}

_genv_set_env GENV_ENVIRONMENT_ID $eid
_genv_replace_env PATH "$GENV_ROOT/shims:\$PATH"
_genv_replace_env PYTHONPATH "$GENV_ROOT/py:\$PYTHONPATH"
_genv_replace_env PS1 "(genv) \${PS1-}"

# register in envs.json
( exec genv exec envs activate --pid \$\$ --eid \$GENV_ENVIRONMENT_ID --uid \$(id -u) --username \$(id -un) )

# load any saved configuration
genv config load
EOS
